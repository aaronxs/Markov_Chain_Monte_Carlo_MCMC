##### Metropolis within Gibbs Algorithm.
# defining prior parameters
P9a = 100
K <- 6
J <- 5
# loading samples
Y = t( matrix(
  c(1545, 1440, 1440, 1520, 1580,
    1540, 1555, 1490, 1560, 1495,
    1595, 1550, 1605, 1510, 1560,
    1445, 1440, 1595, 1465, 1545,
    1595, 1630, 1515, 1635, 1625,
    1520, 1455, 1450, 1480, 1445), nrow=5))
# function g
log_gn9a1 <- function(pa){
  a <- (-P9a/pa[2]) - (P9a/pa[3]) - (pa[1] - P9a)^2/(2*P9a) - sum((pa[4:9] - pa[1])^2)/(2*pa[2]) - sum((Y[1:6,] - pa[4:9])^2)/(2*pa[3])
  b <- (-P9a - 1)*log(pa[2]) + (- P9a -1)*log(pa[3]) + (-K/2)*log(pa[2]) + (-K*J/2)*log(pa[3])
  a + b
}
# varfact function
vf <- function(x) { 2 * sum(acf(x, plot=FALSE)$acf) - 1 }
# nubmer of iterations 
M9 <- 110000
# burn ins
B9 <- 10000
# number of runs
n9 <- 200
# keep track of the estimates
acceptcount9b <- numeric(n9)
Ilist9b <- numeric(n9)

for(i in 1:n9){
  # keep track of and h(x)
  hlist9b <- numeric(M9)
  # intial value of mu,V, W and thetas  
  # intial value of mu,V, W and thetas
  mu <- rnorm(1, mean=100, sd=10)
  V <- rnorm(1, mean=100/(100-1), sd=sqrt(100/(100+1)))
  W <- rnorm(1, mean=100/(100-1), sd=sqrt(100/(100+1)))
  # Check if V & W are positive
  while(V < 0 | W < 0){
    V <- rnorm(1, mean=100/(100-1), sd=sqrt(100/(100+1)))
    W <- rnorm(1, mean=100/(100-1), sd=sqrt(100/(100+1)))
    print(V)
    print(W)
  }
  theta <- rnorm(6, mean=mu, sd=sqrt(V))
  X <- c(mu, V, W, theta)
  # proposed values
  mulist9b <- rnorm(M9, mean=100, sd=10)
  Vlist9b <- rnorm(M9, mean=100/(100-1), sd=sqrt(100/(100+1)))
  Wlist9b <- rnorm(M9, mean=100/(100-1), sd=sqrt(100/(100+1)))
  ulist6 <- runif(M9, min=0, max=1)
  for(j in 1:M9){
    if(Vlist9b[j] > 0 && Wlist9b[j] > 0){
      log_U <- log(ulist6[j])
      # randomly select a coordinate to update
      coord = floor( runif(1,1,10))
      YP <- c(mulist9b[j], Vlist9b[j], Wlist9b[j], rnorm(6, mean=mulist9b[j], sd=sqrt(Vlist9b[j])))
      log_ratio <- log_gn9a1(YP)/log_gn9a1(X)
      if(log_U <= log_ratio){
        X = YP
        acceptcount9b[j] = acceptcount9b[j] + 1
        hlist9b[j] = Vlist9b[j]/Wlist9b[j]
      }
      #   else
      #     log_ratio <- 0
      #     V = Vlist9a[i+1]
    }
  }
  Ilist9b[i] <- mean(hlist9b[(B9+1):M9])
  print(i) 
}
