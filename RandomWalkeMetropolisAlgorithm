#########################  Question 9   #########################
#### part a
# defining prior parameters
P9a = 100
K <- 6
J <- 5
# loading samples
Y = t( matrix(
  c(1545, 1440, 1440, 1520, 1580,
    1540, 1555, 1490, 1560, 1495,
    1595, 1550, 1605, 1510, 1560,
    1445, 1440, 1595, 1465, 1545,
    1595, 1630, 1515, 1635, 1625,
    1520, 1455, 1450, 1480, 1445), nrow=5))

# function g
log_gn9a <- function(mu, V, W, theta){
  a <- (-P9a/V) - (P9a/W) - (mu - P9a)^2/(2*P9a) - sum((theta - mu)^2)/(2*V) - sum((Y[1:6,] - theta[1:6])^2)/(2*W)
  b <- (-P9a - 1)*log(V) + (- P9a -1)*log(W) + (-K/2)*log(V) + (-K*J/2)*log(W)
  a + b
}

# varfact function
vf <- function(x) { 2 * sum(acf(x, plot=FALSE)$acf) - 1 }
# nubmer of iterations 
M9 <- 110000
# burn ins
B9 <- 10000
# number of runs
n9 <- 200
# keep track of the estimates
acceptcount9a <- numeric(n9)
Ilist9a <- numeric(n9)

for(j in 1:n9){
  # keep track of and h(x)
  hlist9a <- numeric(M9)
  # intial value of mu,V, W and thetas
  mu <- rnorm(1, mean=100, sd=10)
  V <- rnorm(1, mean=100/(100-1), sd=sqrt(100/(100+1)))
  W <- rnorm(1, mean=100/(100-1), sd=sqrt(100/(100+1)))
  # Check if V & W are positive
  while(V < 0 | W < 0){
    V <- rnorm(1, mean=100/(100-1), sd=sqrt(100/(100+1)))
    W <- rnorm(1, mean=100/(100-1), sd=sqrt(100/(100+1)))
    print(V)
    print(W)
  }
  theta <- rnorm(6, mean=mu, sd=sqrt(V))
  # proposed values
  mulist9a <- rnorm(M9, mean=100, sd=10)
  Vlist9a <- rnorm(M9, mean=100/(100-1), sd=sqrt(100/(100+1)))
  Wlist9a <- rnorm(M9, mean=100/(100-1), sd=sqrt(100/(100+1)))
  ulist6 <- runif(M9, min=0, max=1)
  for(i in 1:M9){
    log_U <- log(ulist6[i])
    muP <- mulist9a[i]
    VP <- Vlist9a[i]
    WP <- Wlist9a[i]
    # Check if VP & WP are positive
    if(VP > 0 && WP > 0){
      thetaP <- rnorm(6, mean=muP, sd=sqrt(VP))
      log_ratio <- log_gn9a(muP, VP, WP, thetaP)/log_gn9a(mu, V, W, theta)
      if(log_U <= log_ratio){
        mu = muP
        V = VP
        W = WP
        theta = thetaP
        acceptcount9a[j] = acceptcount9a[j] + 1
        hlist9a[i] = V/W
      }
      #   else
      #     log_ratio <- 0
      #     V = Vlist9a[i+1]
    }
  }
  Ilist9a[j] <- mean(hlist9a[(B9+1):M9])
  print(j)
}
# Estimate
I9a <- mean(hlist9a[(B9+1):M9])
# iid standard error
iid9a <- sd(hlist9a[(B9+1):M9])/sqrt(M9-B9)
# standard error
se9a <- iid9a*vf(hlist9a[(B9+1):M9])
